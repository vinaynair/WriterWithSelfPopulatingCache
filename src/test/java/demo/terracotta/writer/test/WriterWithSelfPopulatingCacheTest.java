package demo.terracotta.writer.test;

import demo.terracotta.writer.SimpleCacheEntryFactory;
import demo.terracotta.writer.SimpleWriter;
import junit.framework.Assert;
import net.sf.ehcache.Cache;
import net.sf.ehcache.CacheManager;
import net.sf.ehcache.Element;
import net.sf.ehcache.constructs.blocking.CacheEntryFactory;
import net.sf.ehcache.constructs.blocking.SelfPopulatingCache;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.slf4j.Logger;


/**
 * Created by vch on 1/5/14.
 */
public class WriterWithSelfPopulatingCacheTest {
    private static final Logger LOG = org.slf4j.LoggerFactory.getLogger(WriterWithSelfPopulatingCacheTest.class);

    CacheManager cacheManager;
    Cache cache;
    SelfPopulatingCache selfPopulatingCache;


    @Before
    public void setUp() {
        cacheManager = CacheManager.getInstance();
        cache = cacheManager.getCache("writerCache");
        Assert.assertNotNull("Did not find writerCache in ehcache.xml", cache);
        cache.removeAll();//just to be sure we clear all entries from the cache up
        //setup the self populating cache against the cache backed by a writer
        CacheEntryFactory cacheEntryFactory = new SimpleCacheEntryFactory();
        selfPopulatingCache = new SelfPopulatingCache(cache, cacheEntryFactory);

    }

    /**
     * Check self populating cache is invoking the {@link demo.terracotta.writer.SimpleCacheEntryFactory} to create entries
     */
    @Test
    public void selfPopulationTest() {

        Element element = selfPopulatingCache.get("1");

        Assert.assertNotNull("self population returned null element", element);
        Assert.assertNotNull("value generated by the cache entry factory was null", element.getObjectValue());
        Assert.assertEquals("value was not generated using our self populator", "value-1", element.getObjectValue());

    }

    /**
     * Check that {@link net.sf.ehcache.constructs.blocking.SelfPopulatingCache}
     * is also able to use to {@link demo.terracotta.writer.SimpleWriter} configured to write-behind
     */
    @Test
    public void selfPopulatingCacheUsingTheWrtier() {

        //writing should invoke the SimpleWriter to write the entries out to the possibly backing data source
        selfPopulatingCache.putWithWriter(new Element("2", "new-value-2"));

        Assert.assertNotNull("SimpleWriter has not written the entry (yet)", SimpleWriter.ENTRIES.get("2"));
        Assert.assertNull("SimpleWriter has not written the entry (yet)", SimpleWriter.ENTRIES.get("1"));

    }

    @After
    public void shutDown() {
        cacheManager.shutdown();
    }
}
